class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        # BFS design 
        if '0000' in deadends:
            return -1
        def get_nei(node, i):
            left, cur, right = node[:i], int(node[i]), node[i+1:]
            cur_left = cur - 1 if cur != 0 else 9
            cur_right = cur + 1 if cur != 9 else 0
            return (left + str(cur_left) + right, left + str(cur_right) + right)
            
        q = deque()
        q.append((0, '0000'))
        seen = set(['0000'])
        deadends = set(deadends)

        while q:
            turns, state = q.popleft()
            if state == target:
                return turns 
            
            for i in range(4):
                state_l, state_r = get_nei(state, i)
                if state_l not in seen and state_l not in deadends:
                    seen.add(state_l)
                    q.append((turns + 1, state_l))
                if state_r not in seen and state_r not in deadends:
                    seen.add(state_r)
                    q.append((turns + 1, state_r))
        
        return -1    

    

        

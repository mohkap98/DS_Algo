class Solution:
    def numSimilarGroups(self, strs: List[str]) -> int:
        n = len(strs)
        parent = [i for i in range(n)]

        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            px = find(x)
            py = find(y)
            if px != py:
                parent[py] = px

        def isSimilar(a, b):
            swaps = 0
            for i in range(len(a)):
                if a[i] != b[i]:
                    swaps += 1
                    if swaps > 2:
                        return False
            return swaps == 2 or swaps == 0

        for i in range(n):
            for j in range(i+1, n):
                if isSimilar(strs[i], strs[j]):
                    union(i, j)

        # Count unique parents
        groups = set(find(i) for i in range(n))
        return len(groups)

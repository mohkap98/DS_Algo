class DSU:
    def __init__(self, n) -> None:
        self.parent = [i for i in range(n)]
        self.rank = [0 for _ in range(n)]
    
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])  # ğŸ”§ Path compression
        return self.parent[x]

    
    def union(self, u, v):
        par_u = self.find(u)
        par_v = self.find(v)
        
        if par_u == par_v:
            return 
        else:
            if self.rank[par_u] > self.rank[par_v]:
                self.parent[par_v] = par_u
            elif self.rank[par_v] > self.rank[par_u]:
                self.parent[par_u] = par_v
            else:
                self.parent[par_v] = par_u
                self.rank[par_u] += 1
    
                    
        

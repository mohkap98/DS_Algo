import heapq
from collections import defaultdict
from typing import List

class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        adj = defaultdict(list)
        for u, v, wt in times:
            adj[u].append((v, wt))

        dist = [float('inf')] * (n + 1)
        dist[k] = 0

        heap = [(0, k)]
        while heap:
            time, node = heapq.heappop(heap)
            if time > dist[node]:
                continue
            for nei, wt in adj[node]:
                if dist[node] + wt < dist[nei]:
                    dist[nei] = dist[node] + wt
                    heapq.heappush(heap, (dist[nei], nei))

        max_dist = max(dist[1:])  # nodes are 1-indexed
        return max_dist if max_dist != float('inf') else -1

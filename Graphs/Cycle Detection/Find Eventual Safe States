class Solution:
    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:

        # cycle detection in a directed graph using DFS 
        
        seen = set()
        curr_state = set()
        l = len(graph)    
        def DFS(node):
            seen.add(node)
            curr_state.add(node)        
            for nei_node in graph[node]:
                if nei_node not in seen and DFS(nei_node):
                    return True
                elif nei_node in curr_state:
                    return True
            curr_state.remove(node)
            return False
        
        res = []
        for node in range(l):
            if not DFS(node):
                res.append(node)
        return res

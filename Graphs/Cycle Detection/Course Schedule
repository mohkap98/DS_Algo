class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        courses = defaultdict(list)
        for u,v in prerequisites:
            courses[u].append(v)
        
        visited = set() # global state
        visiting = set() # current state

        def DFS(course):
            if course in visiting: # cycle in sub-graph
                return False
            if course in visited:
                return True
            
            visited.add(course)
            visiting.add(course)
            for nei_course in courses[course]:
                if not DFS(nei_course):
                    return False
            visiting.remove(course)
            return True
        
        for i in range(numCourses):
            if i not in visited and not DFS(i):
                return False
        return True
                

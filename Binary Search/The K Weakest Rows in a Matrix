# Brute Force Heap 
class Solution:
    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:
        # heap 
        weakest_rows = []

        for i in range(len(mat)):
            heapq.heappush(weakest_rows, [sum(mat[i]), i])
        
        res = []
        while k:
            res.append(heapq.heappop(weakest_rows)[1])
            k-=1
        return res

# BS with Heap 
class Solution:
    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:
        # binary_search
        def BS(row):
            l,r = 0,len(row)-1
            while l<=r:
                mid = (l+r)//2
                if row[mid] == 1:
                    l = mid + 1
                else:
                    r = mid - 1
            return l

        weakest_rows = []

        for i in range(len(mat)):
            heapq.heappush(weakest_rows, [BS(mat[i]), i])
        
        res = []
        while k:
            res.append(heapq.heappop(weakest_rows)[1])
            k-=1
        return res
        

class ListNode:
    def __init__(self, key, val):
        self.key = key
        self.val = val
        self.prev = self.next = None

class LRUCache:

    def __init__(self, capacity: int):
        self.cap = capacity
        self.cache = dict()
        self.head = self.tail = ListNode(-1,-1)
        self.head.next = self.tail
        self.tail.prev = self.head
              
    def delete_node(self, node):
        prev_node = node.prev
        nxt_node = node.next
        prev_node.next = nxt_node
        nxt_node.prev = prev_node
        
    def insert_after_head(self, node):
        temp = self.head.next
        self.head.next = node
        node.prev = self.head
        node.next = temp
        temp.prev = node
        
    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        node = self.cache[key]
        self.delete_node(node)
        self.insert_after_head(node)
        return node.val

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            node = self.cache[key]
            node.val = value 
            self.delete_node(node)   
            self.insert_after_head(node)
        else:
            if len(self.cache) >= self.cap:
                node = self.tail.prev
                del self.cache[node.key]
                self.delete_node(node)
            node = ListNode(key, value)
            self.cache[key] = node
            self.insert_after_head(node)
        
        
       
# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

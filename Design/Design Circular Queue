class ListNode:
    def __init__(self, val=0):
        self.val = val
        self.prev = self.next = None

class MyCircularQueue:

    def __init__(self, k: int):
        self.front = ListNode()  # front
        self.rear = ListNode()   # rear
        self.front.next = self.rear
        self.rear.prev = self.front

        self.capacity = k
        self.count = 0  # size

    def enQueue(self, value: int) -> bool:
        if self.isFull():
            return False
        node = ListNode(value)
        prev_node = self.rear.prev

        prev_node.next = node
        node.prev = prev_node

        node.next = self.rear
        self.rear.prev = node

        self.count += 1
        return True

    def deQueue(self) -> bool:
        if self.isEmpty():
            return False
        node_to_remove = self.front.next

        self.front.next = node_to_remove.next
        node_to_remove.next.prev = self.front

        node_to_remove.prev = node_to_remove.next = None  # Clean up
        self.count -= 1
        return True

    def Front(self) -> int:
        if self.isEmpty():
            return -1
        return self.front.next.val

    def Rear(self) -> int:
        if self.isEmpty():
            return -1
        return self.rear.prev.val

    def isEmpty(self) -> bool:
        return self.count == 0

    def isFull(self) -> bool:
        return self.count == self.capacity

class Solution:
    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:
        exec_times = [0] * n  # Stores execution time of each function
        call_stack = []  # Keeps track of active function calls
        prev_time = 0  # Previous timestamp
        
        for log in logs:
            func_id, call_type, timestamp = log.split(":")
            func_id = int(func_id)
            timestamp = int(timestamp)
            
            if call_type == "start":
                if call_stack:
                    # Accumulate time spent on the previous function
                    exec_times[call_stack[-1]] += timestamp - prev_time
                call_stack.append(func_id)
                prev_time = timestamp
            else:  # "end" case
                exec_times[call_stack.pop()] += timestamp - prev_time + 1  # Fix: Use += instead of =
                prev_time = timestamp + 1  # Move past this function's execution
        
        return exec_times

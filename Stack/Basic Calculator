class Solution:
    def calculate(self, s: str) -> int:
        stack = []
        curr_num = 0
        curr_opr = 1  # +1 for '+' and -1 for '-'
        result = 0
        i = 0

        while i < len(s):
            char = s[i]

            # If the character is a digit, construct the full number
            if char.isdigit():
                curr_num = 0
                while i < len(s) and s[i].isdigit():
                    curr_num = curr_num * 10 + int(s[i])
                    i += 1
                result += curr_opr * curr_num
                i -= 1  # Adjust because the loop will increment `i`

            elif char == '+':
                curr_opr = 1  # Set operator to positive

            elif char == '-':
                curr_opr = -1  # Set operator to negative

            elif char == '(':
                # Push current result and operator onto stack, then reset
                stack.append(result)
                stack.append(curr_opr)
                result = 0
                curr_opr = 1  # Reset operator for inside parentheses

            elif char == ')':
                # Compute the expression inside parentheses
                prev_opr = stack.pop()
                prev_result = stack.pop()
                result = prev_result + (prev_opr * result)

            i += 1

        return result

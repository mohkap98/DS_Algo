class Solution:
    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
        total = sum(nums)
        if total % k != 0:
            return False
        
        target = total // k
        used = [False] * len(nums)
        nums.sort(reverse=True)  # Optional: helps prune faster

        def canPart(i, k, curSum):
            if k == 0:
                return True
            if curSum == target:
                return canPart(0, k - 1, 0)

            for j in range(i, len(nums)):
                if used[j] or curSum + nums[j] > target:
                    continue
                used[j] = True
                if canPart(j + 1, k, curSum + nums[j]):
                    return True
                used[j] = False
               
                if curSum == 0:
                    break
            return False

        return canPart(0, k, 0)

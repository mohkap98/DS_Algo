class TrieNode:
    def __init__(self):
        self.children = {}
        self.index = -1

class Trie:
    def __init__(self):
        self.root = TrieNode()
    
    def insert(self, word, index):
        curr = self.root
        for ch in word:
            if ch not in curr.children:
                curr.children[ch] = TrieNode()
            curr = curr.children[ch]
            curr.index = index
    
    def find(self, prefix, suffix):
        ps = suffix + "#" + prefix
        curr = self.root 
        for ch in ps:
            if ch not in curr.children:
                return -1
            curr = curr.children[ch]
        return curr.index

class WordFilter:
    def __init__(self, words: List[str]):
        self.T = Trie()
        for idx, word in enumerate(words):
            temp = word + "#" + word
            for i in range(len(word)):
                self.T.insert(temp[i:], idx)

    def f(self, pref: str, suff: str) -> int:
        return self.T.find(pref, suff)


# net window size = (r-l+1) - max freq char will give conversions required. If req conversions > alloted conversions - decrement the window. Else increment the window 
            
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        char_freq = defaultdict(int)
        maxL = 0
        l,r = 0,0 

        while l<=r and r<len(s):
            char_freq[s[r]] +=1
            
            while r-l+1 - max(char_freq.values()) > k:
                char_freq[s[l]] -=1
                l+=1          
            maxL = max(maxL, r-l+1)
            r+=1
        return maxL
        

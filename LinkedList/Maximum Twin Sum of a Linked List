# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def pairSum(self, head: Optional[ListNode]) -> int:
        # find mid point = pivot 
        slow = fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        h1 = head
        h2 = self.reverseLL(slow)
        summ = -inf
        while h1 and h2:
            summ = max(summ, h1.val + h2.val)
            h1 = h1.next
            h2 = h2.next

        return summ
    def reverseLL(self, head):
        curr = head
        prev = None 
        while curr:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        return prev
        

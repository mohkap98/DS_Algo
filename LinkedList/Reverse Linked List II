# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        # 3 ptr
        if not head or left == right:
            return head
        dummy = ListNode(0, head)
        p1 = dummy
        
        for _ in range(left - 1):
            p1 = p1.next
        
        p2 = p1.next
        curr = p2
        
        for _ in range(right - left):
            curr = curr.next
        
        p3 = curr.next
        curr.next = None

        p2 = self.reverseLL(p2)
        while p2.next:
            p1.next = p2
            p1 = p1.next
            p2 = p2.next
        p2.next = p3

        return dummy.next

    def reverseLL(self, head):
        curr = head
        prev = None 
        while curr:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        return prev



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head or not head.next or k == 0:
            return head
        
        # get length of LL
        length = 1
        curr = head
        while curr.next:
            length += 1
            curr = curr.next
        
        # handle k 
        k %= length 
        if not k:
            return head
        
        new_tail = head
        for _ in range(length - k-1):
            new_tail = new_tail.next
        
        rotated_head = new_tail.next
        new_tail.next = None

        # add both links 
        curr.next = head
        return rotated_head
        


        

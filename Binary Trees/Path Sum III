# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        # Optimal approach O(n) using prefix sum 
        self.ans = 0
        self.pSum = defaultdict(int)
        def DFS(curr, currSum):
            if not curr:
                return 
            currSum += curr.val
            if currSum == targetSum:
                self.ans += 1
            if self.pSum and currSum - targetSum in self.pSum:
                self.ans += self.pSum[currSum - targetSum]
            
            self.pSum[currSum]+=1
            DFS(curr.left, currSum)
            DFS(curr.right, currSum)
            self.pSum[currSum]-=1
        DFS(root, 0)
        return self.ans 
            


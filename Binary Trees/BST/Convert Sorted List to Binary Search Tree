# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:
        
        def findMiddle(start):
            prev = None
            slow = fast = start
            while fast and fast.next:
                prev = slow
                slow = slow.next
                fast = fast.next.next
            
            if prev:
                prev.next = None

            return slow

        def DFS(node):
            if not node:
                return None
            if not node.next:
                return TreeNode(node.val)
            
            cur = findMiddle(node)
            root = TreeNode(cur.val)

            root.left = DFS(node) if node != cur else None
            root.right = DFS(cur.next)

            return root
            
        return DFS(head)

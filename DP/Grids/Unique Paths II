class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        if obstacleGrid[0][0] == 1 or obstacleGrid[m-1][n-1] == 1:
            return 0
        
        cache = {}
        def findWays(i,j):
            if i == m-1 and j == n-1:
                return 1
            if i < 0 or i >= m or j < 0 or j >= n or obstacleGrid[i][j]:
                return 0
            if (i,j) in cache:
                return cache[(i,j)]
            
            cache[(i,j)] = findWays(i,j+1) + findWays(i+1,j)
            return cache[(i,j)]
        
        return findWays(0,0)

class Solution:
    def minCost(self, n: int, cuts: List[int]) -> int:
        cache = {}

        def DFS(l,r):
            # (0,1) no cuts possible
            if l + 1 == r:
                return 0
            if (l,r) in cache:
                return cache[(l,r)]

            cost = inf
            for cut in cuts:
                if l < cut < r:
                    cost = min(cost, (r - l) + DFS(l, cut) + DFS(cut, r))
            
            cache[(l,r)] = 0 if cost == inf else cost
            return cache[(l,r)]
            
        return DFS(0, n)
            
        

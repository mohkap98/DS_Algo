class Solution:
    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:
        m,n = len(str1), len(str2)

        dp = [[0]*(n+1) for _ in range(m+1)]

        for i in range(m+1):
            for j in range(n+1):
                if i == 0 or j == 0:
                    dp[i][j] = i+j
                elif str1[i-1] == str2[j-1]:
                    dp[i][j] = 1 + dp[i-1][j-1]
                else:
                    dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j])
        
        i,j = m,n
        res = []
        while i > 0 and j > 0:
            if str1[i-1] == str2[j-1]:
                res.append(str1[i-1])
                i -= 1
                j -= 1
            else:
                if dp[i-1][j] < dp[i][j-1]:
                    res.append(str1[i-1])
                    i -= 1
                else:
                    res.append(str2[j-1])
                    j -= 1

        while i > 0:
            res.append(str1[i-1])
            i -= 1
        while j > 0:
            res.append(str2[j-1])
            j -= 1

        return "".join(reversed(res))


class Solution:
    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:
        cache = {}
        
        def SCS(i, j):
            if i >= len(str1):
                return str2[j:]
            if j >= len(str2):
                return str1[i:]
            if (i, j) in cache:
                return cache[(i, j)]

            if str1[i] == str2[j]:
                cache[(i, j)] = str1[i] + SCS(i + 1, j + 1)
            else:
                st1 = str1[i] + SCS(i + 1, j)
                st2 = str2[j] + SCS(i, j + 1)
                cache[(i, j)] = st1 if len(st1) < len(st2) else st2

            return cache[(i, j)]
        
        return SCS(0, 0)

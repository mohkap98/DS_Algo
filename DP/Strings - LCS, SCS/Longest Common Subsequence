class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        n1, n2 = len(text1), len(text2)
        dp = [[0] * (n2 + 1) for _ in range(n1 + 1)]

        for i in range(n1 - 1, -1, -1):
            for j in range(n2 - 1, -1, -1):
                if text1[i] == text2[j]:
                    dp[i][j] = 1 + dp[i + 1][j + 1]
                else:
                    dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])

        return dp[0][0]


class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        n1, n2 = len(text1), len(text2)
        memo = {} 
        def LCS(i, j):
            if i >= n1 or j >= n2:
                return 0
            if text1[i] == text2[j]:
                return 1 + LCS(i+1, j+1)
            
            if (i,j) in memo:
                return memo[(i,j)]

            move_i = LCS(i+1, j)
            move_j = LCS(i, j+1)
            memo[(i,j)] =  max(move_i, move_j)
            return memo[(i,j)]
        
        return LCS(0,0)


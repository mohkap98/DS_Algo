class Solution:
    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:
        
        meetings.sort()

        # min_heap
        available, used = [i for i in range(n)], [] # (end, room#)
        count = [0] * n
    
        for start, end in meetings:
            while used and used[0][0] <= start:
                endTime, room = heapq.heappop(used)
                heapq.heappush(available, room)
            
            # if no room is available 
            if not available:
                endTime, room = heapq.heappop(used)
                end = endTime + (end-start)
                heapq.heappush(available, room)
            
            room = heapq.heappop(available)
            heapq.heappush(used, (end, room))
            count[room] += 1

        return count.index(max(count))


        
